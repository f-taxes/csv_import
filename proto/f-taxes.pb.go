// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: f-taxes.proto

package proto

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxAction int32

const (
	TxAction_BUY  TxAction = 0
	TxAction_SELL TxAction = 1
)

// Enum value maps for TxAction.
var (
	TxAction_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	TxAction_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x TxAction) Enum() *TxAction {
	p := new(TxAction)
	*p = x
	return p
}

func (x TxAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxAction) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[0].Descriptor()
}

func (TxAction) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[0]
}

func (x TxAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxAction.Descriptor instead.
func (TxAction) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{0}
}

type TransferType int32

const (
	TransferType_DEPOSIT    TransferType = 0
	TransferType_WITHDRAWAL TransferType = 1
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAWAL",
	}
	TransferType_value = map[string]int32{
		"DEPOSIT":    0,
		"WITHDRAWAL": 1,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[1].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[1]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_TAKER OrderType = 0
	OrderType_MAKER OrderType = 1
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "TAKER",
		1: "MAKER",
	}
	OrderType_value = map[string]int32{
		"TAKER": 0,
		"MAKER": 1,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{2}
}

type SrcTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID          string                 `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Account       string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Comment       string                 `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Ticker        string                 `protobuf:"bytes,10,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	Quote         string                 `protobuf:"bytes,11,opt,name=Quote,proto3" json:"Quote,omitempty"`
	Base          string                 `protobuf:"bytes,12,opt,name=Base,proto3" json:"Base,omitempty"`
	Price         string                 `protobuf:"bytes,20,opt,name=Price,proto3" json:"Price,omitempty"`
	Amount        string                 `protobuf:"bytes,21,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Value         string                 `protobuf:"bytes,22,opt,name=Value,proto3" json:"Value,omitempty"`
	Action        TxAction               `protobuf:"varint,23,opt,name=Action,proto3,enum=FTaxesGrpc.TxAction" json:"Action,omitempty"`
	OrderType     OrderType              `protobuf:"varint,24,opt,name=OrderType,proto3,enum=FTaxesGrpc.OrderType" json:"OrderType,omitempty"`
	OrderID       string                 `protobuf:"bytes,25,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Fee           string                 `protobuf:"bytes,30,opt,name=Fee,proto3" json:"Fee,omitempty"`
	FeeCurrency   string                 `protobuf:"bytes,31,opt,name=FeeCurrency,proto3" json:"FeeCurrency,omitempty"`
	FeeRate       string                 `protobuf:"bytes,32,opt,name=FeeRate,proto3" json:"FeeRate,omitempty"`
	Plugin        string                 `protobuf:"bytes,90,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion string                 `protobuf:"bytes,91,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,92,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *SrcTx) Reset() {
	*x = SrcTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcTx) ProtoMessage() {}

func (x *SrcTx) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcTx.ProtoReflect.Descriptor instead.
func (*SrcTx) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{0}
}

func (x *SrcTx) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *SrcTx) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SrcTx) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SrcTx) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SrcTx) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *SrcTx) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *SrcTx) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *SrcTx) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SrcTx) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SrcTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SrcTx) GetAction() TxAction {
	if x != nil {
		return x.Action
	}
	return TxAction_BUY
}

func (x *SrcTx) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_TAKER
}

func (x *SrcTx) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *SrcTx) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SrcTx) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *SrcTx) GetFeeRate() string {
	if x != nil {
		return x.FeeRate
	}
	return ""
}

func (x *SrcTx) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *SrcTx) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *SrcTx) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type SrcTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID          string                 `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Account       string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Comment       string                 `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Currency      string                 `protobuf:"bytes,10,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Amount        string                 `protobuf:"bytes,11,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Value         string                 `protobuf:"bytes,12,opt,name=Value,proto3" json:"Value,omitempty"`
	Type          TransferType           `protobuf:"varint,20,opt,name=Type,proto3,enum=FTaxesGrpc.TransferType" json:"Type,omitempty"`
	Source        string                 `protobuf:"bytes,21,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination   string                 `protobuf:"bytes,22,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Fee           string                 `protobuf:"bytes,30,opt,name=Fee,proto3" json:"Fee,omitempty"`
	FeeCurrency   string                 `protobuf:"bytes,31,opt,name=FeeCurrency,proto3" json:"FeeCurrency,omitempty"`
	Plugin        string                 `protobuf:"bytes,90,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion string                 `protobuf:"bytes,91,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,92,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *SrcTransfer) Reset() {
	*x = SrcTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcTransfer) ProtoMessage() {}

func (x *SrcTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcTransfer.ProtoReflect.Descriptor instead.
func (*SrcTransfer) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{1}
}

func (x *SrcTransfer) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *SrcTransfer) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SrcTransfer) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SrcTransfer) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SrcTransfer) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SrcTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SrcTransfer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SrcTransfer) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_DEPOSIT
}

func (x *SrcTransfer) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SrcTransfer) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SrcTransfer) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SrcTransfer) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *SrcTransfer) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *SrcTransfer) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *SrcTransfer) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type SrcGenericFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID          string                 `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Account       string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Comment       string                 `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Fee           string                 `protobuf:"bytes,30,opt,name=Fee,proto3" json:"Fee,omitempty"`
	FeeCurrency   string                 `protobuf:"bytes,31,opt,name=FeeCurrency,proto3" json:"FeeCurrency,omitempty"`
	FeeRate       string                 `protobuf:"bytes,32,opt,name=FeeRate,proto3" json:"FeeRate,omitempty"`
	Plugin        string                 `protobuf:"bytes,90,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion string                 `protobuf:"bytes,91,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,92,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *SrcGenericFee) Reset() {
	*x = SrcGenericFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcGenericFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcGenericFee) ProtoMessage() {}

func (x *SrcGenericFee) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcGenericFee.ProtoReflect.Descriptor instead.
func (*SrcGenericFee) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{2}
}

func (x *SrcGenericFee) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *SrcGenericFee) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SrcGenericFee) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SrcGenericFee) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SrcGenericFee) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SrcGenericFee) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *SrcGenericFee) GetFeeRate() string {
	if x != nil {
		return x.FeeRate
	}
	return ""
}

func (x *SrcGenericFee) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *SrcGenericFee) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *SrcGenericFee) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type JobProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	Progress string `protobuf:"bytes,3,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Plugin   string `protobuf:"bytes,4,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
}

func (x *JobProgress) Reset() {
	*x = JobProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProgress) ProtoMessage() {}

func (x *JobProgress) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProgress.ProtoReflect.Descriptor instead.
func (*JobProgress) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{3}
}

func (x *JobProgress) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *JobProgress) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *JobProgress) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *JobProgress) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

type TxUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Since,proto3" json:"Since,omitempty"`
}

func (x *TxUpdate) Reset() {
	*x = TxUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxUpdate) ProtoMessage() {}

func (x *TxUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxUpdate.ProtoReflect.Descriptor instead.
func (*TxUpdate) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{4}
}

func (x *TxUpdate) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

var File_f_taxes_proto protoreflect.FileDescriptor

var file_f_taxes_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x04, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x54, 0x78,
	0x12, 0x1b, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x02, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46,
	0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x53, 0x72,
	0x63, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x65,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x67, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x08, 0x54, 0x78,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x2a, 0x1d, 0x0a, 0x08, 0x54, 0x78, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x41, 0x4c, 0x10, 0x01, 0x2a, 0x21, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x32, 0x96, 0x02, 0x0a, 0x06, 0x46, 0x54, 0x61, 0x78,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x72, 0x63, 0x54, 0x78, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x72, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x65, 0x65, 0x12, 0x19, 0x2e, 0x46, 0x54, 0x61, 0x78,
	0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x72, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x46, 0x65, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0f,
	0x53, 0x68, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0x4f, 0x0a, 0x09, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x74, 0x6c, 0x12, 0x42, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x66, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_f_taxes_proto_rawDescOnce sync.Once
	file_f_taxes_proto_rawDescData = file_f_taxes_proto_rawDesc
)

func file_f_taxes_proto_rawDescGZIP() []byte {
	file_f_taxes_proto_rawDescOnce.Do(func() {
		file_f_taxes_proto_rawDescData = protoimpl.X.CompressGZIP(file_f_taxes_proto_rawDescData)
	})
	return file_f_taxes_proto_rawDescData
}

var file_f_taxes_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_f_taxes_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_f_taxes_proto_goTypes = []interface{}{
	(TxAction)(0),                 // 0: FTaxesGrpc.TxAction
	(TransferType)(0),             // 1: FTaxesGrpc.TransferType
	(OrderType)(0),                // 2: FTaxesGrpc.OrderType
	(*SrcTx)(nil),                 // 3: FTaxesGrpc.SrcTx
	(*SrcTransfer)(nil),           // 4: FTaxesGrpc.SrcTransfer
	(*SrcGenericFee)(nil),         // 5: FTaxesGrpc.SrcGenericFee
	(*JobProgress)(nil),           // 6: FTaxesGrpc.JobProgress
	(*TxUpdate)(nil),              // 7: FTaxesGrpc.TxUpdate
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_f_taxes_proto_depIdxs = []int32{
	8,  // 0: FTaxesGrpc.SrcTx.Ts:type_name -> google.protobuf.Timestamp
	0,  // 1: FTaxesGrpc.SrcTx.Action:type_name -> FTaxesGrpc.TxAction
	2,  // 2: FTaxesGrpc.SrcTx.OrderType:type_name -> FTaxesGrpc.OrderType
	8,  // 3: FTaxesGrpc.SrcTx.Created:type_name -> google.protobuf.Timestamp
	8,  // 4: FTaxesGrpc.SrcTransfer.Ts:type_name -> google.protobuf.Timestamp
	1,  // 5: FTaxesGrpc.SrcTransfer.Type:type_name -> FTaxesGrpc.TransferType
	8,  // 6: FTaxesGrpc.SrcTransfer.Created:type_name -> google.protobuf.Timestamp
	8,  // 7: FTaxesGrpc.SrcGenericFee.Ts:type_name -> google.protobuf.Timestamp
	8,  // 8: FTaxesGrpc.SrcGenericFee.Created:type_name -> google.protobuf.Timestamp
	8,  // 9: FTaxesGrpc.TxUpdate.Since:type_name -> google.protobuf.Timestamp
	3,  // 10: FTaxesGrpc.FTaxes.SubmitTransaction:input_type -> FTaxesGrpc.SrcTx
	4,  // 11: FTaxesGrpc.FTaxes.SubmitTransfer:input_type -> FTaxesGrpc.SrcTransfer
	5,  // 12: FTaxesGrpc.FTaxes.SubmitGenericFee:input_type -> FTaxesGrpc.SrcGenericFee
	6,  // 13: FTaxesGrpc.FTaxes.ShowJobProgress:input_type -> FTaxesGrpc.JobProgress
	7,  // 14: FTaxesGrpc.PluginCtl.UpdateTransactions:input_type -> FTaxesGrpc.TxUpdate
	9,  // 15: FTaxesGrpc.FTaxes.SubmitTransaction:output_type -> google.protobuf.Empty
	9,  // 16: FTaxesGrpc.FTaxes.SubmitTransfer:output_type -> google.protobuf.Empty
	9,  // 17: FTaxesGrpc.FTaxes.SubmitGenericFee:output_type -> google.protobuf.Empty
	9,  // 18: FTaxesGrpc.FTaxes.ShowJobProgress:output_type -> google.protobuf.Empty
	9,  // 19: FTaxesGrpc.PluginCtl.UpdateTransactions:output_type -> google.protobuf.Empty
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_f_taxes_proto_init() }
func file_f_taxes_proto_init() {
	if File_f_taxes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_f_taxes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcGenericFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_f_taxes_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_f_taxes_proto_goTypes,
		DependencyIndexes: file_f_taxes_proto_depIdxs,
		EnumInfos:         file_f_taxes_proto_enumTypes,
		MessageInfos:      file_f_taxes_proto_msgTypes,
	}.Build()
	File_f_taxes_proto = out.File
	file_f_taxes_proto_rawDesc = nil
	file_f_taxes_proto_goTypes = nil
	file_f_taxes_proto_depIdxs = nil
}
